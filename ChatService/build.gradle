plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.4'
	id 'io.spring.dependency-management' version '1.1.4'
}

group = 'it.homeo'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('springCloudVersion', "2023.0.1")
	set('otelVersion', "2.3.0")
}

dependencies {
	implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'io.micrometer:micrometer-registry-prometheus'
	implementation 'org.springframework.boot:spring-boot-starter-amqp'
	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.security:spring-security-messaging'
	implementation 'org.springframework.boot:spring-boot-starter-websocket'
	implementation 'com.okta.spring:okta-spring-boot-starter:3.0.6'
	implementation 'org.springframework.boot:spring-boot-starter-reactor-netty'
	implementation 'com.auth0:auth0:2.7.0'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'
	implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
	implementation 'com.cloudinary:cloudinary-http45:1.38.0'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly("io.opentelemetry.javaagent:opentelemetry-javaagent:${otelVersion}")
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.amqp:spring-rabbit-test'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

tasks.register('copyOpenTelemetryDependency', Copy) {
	from configurations.runtimeClasspath.filter { it.name == "opentelemetry-javaagent-${otelVersion}.jar"}
	into "${project.layout.buildDirectory.get().getAsFile()}/output/libs"
	rename("opentelemetry-javaagent-${otelVersion}.jar", "opentelemetry-javaagent.jar")
}
build.dependsOn(copyOpenTelemetryDependency)
